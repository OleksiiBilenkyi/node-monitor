import discord
from discord.ext import tasks
from datetime import datetime
import paramiko
import aiosqlite
from data_base import get_server_info, get_ignored_containers
import logging
import os
import asyncio

class PaginationView(discord.ui.View):
    def __init__(self, server_ip, server_info, containers, page=0, timeout=None):
        super().__init__(timeout=timeout)
        self.server_ip = server_ip
        self.server_info = server_info
        self.containers = containers
        self.page = page
        self.per_page = 20
        self.total_pages = (len(containers) + self.per_page - 1) // self.per_page

    @discord.ui.button(label="–ü–æ–ø–µ—Ä–µ–¥–Ω—è", style=discord.ButtonStyle.grey, disabled=True)
    async def previous(self, interaction: discord.Interaction, button: discord.ui.Button):
        if self.page > 0:
            self.page -= 1
            await self.update_message(interaction)
        button.disabled = self.page == 0
        self.next.disabled = self.page == self.total_pages - 1
        await interaction.response.edit_message(content=self.get_message_text(), view=self)

    @discord.ui.button(label="–ù–∞—Å—Ç—É–ø–Ω–∞", style=discord.ButtonStyle.grey)
    async def next(self, interaction: discord.Interaction, button: discord.ui.Button):
        if self.page < self.total_pages - 1:
            self.page += 1
            await self.update_message(interaction)
        button.disabled = self.page == self.total_pages - 1
        self.previous.disabled = self.page == 0
        await interaction.response.edit_message(content=self.get_message_text(), view=self)

    async def update_message(self, interaction: discord.Interaction):
        await interaction.response.edit_message(content=self.get_message_text(), view=self)

    def get_message_text(self):
        start = self.page * self.per_page
        end = min(start + self.per_page, len(self.containers))
        text = f"**–°–µ—Ä–≤–µ—Ä {self.server_ip}**\n"
        text += f"*–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤*: {len(self.containers)}\n"
        text += f"*–ù–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è*: CPU {self.server_info['cpu']}%, RAM {self.server_info['mem']}, –î–∏—Å–∫ {self.server_info['disk']}\n"
        text += f"*–ß–∞—Å —Ä–æ–±–æ—Ç–∏*: {self.server_info['uptime']}\n"
        text += "----------------------------------------\n"
        if self.total_pages > 1:
            text += f"–°—Ç–æ—Ä—ñ–Ω–∫–∞ {self.page + 1}/{self.total_pages}\n"
        text += "```css\n–°—Ç–∞—Ç—É—Å –Ü–º‚Äô—è            –ß–∞—Å —Ä–æ–±–æ—Ç–∏           CPU      RAM\n" + "-" * 50 + "\n"
        for c in self.containers[start:end]:
            status = "üü¢" if c['status'] == "running" else "üî¥"
            text += f"{status} {c['name']:<15} {c['uptime'][:20]:<20} {c['cpu_load']:<8} {c['mem_load']:<8}\n"
        text += "```\n"
        text += f"*–û—Å—Ç–∞–Ω–Ω—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S UTC')}*"
        return text

def setup_commands(bot):
    bot.monitor_state = {"messages": {}, "servers": [], "container_cache": {}}
    bot.allowed_users = set(map(int, os.getenv("ALLOWED_USERS", "313381427586531340").split(",")))

    log_dir = "logs"
    os.makedirs(log_dir, exist_ok=True)
    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s [%(levelname)s] %(message)s",
        handlers=[
            logging.FileHandler(os.path.join(log_dir, "bot.log"), encoding="utf-8"),
            logging.StreamHandler()
        ]
    )

    async def check_permissions(ctx):
        if not bot.allowed_users or ctx.author.id in bot.allowed_users:
            return True
        await ctx.reply("–£ —Ç–µ–±–µ –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏!", delete_after=5)
        await ctx.message.delete()
        return False

    @bot.command(name="help")
    async def custom_help(ctx):
        text = (
            "**–î–æ–ø–æ–º–æ–≥–∞**\n"
            "```css\n"
            "!add_server <ip> <username> <password> [name] [port] - –î–æ–¥–∞—î —Å–µ—Ä–≤–µ—Ä.\n"
            "!ignore_container <name> - –Ü–≥–Ω–æ—Ä—É—î –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä.\n"
            "!unignore_container <name> - –ü—Ä–∏–±–∏—Ä–∞—î –∑—ñ —Å–ø–∏—Å–∫—É —ñ–≥–Ω–æ—Ä–æ–≤–∞–Ω–∏—Ö.\n"
            "!start_monitor - –ó–∞–ø—É—Å–∫–∞—î –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥.\n"
            "!force_update - –û–Ω–æ–≤–ª—é—î –¥–∞–Ω—ñ.\n"
            "!sh <ip> <command> - –í–∏–∫–æ–Ω—É—î –∫–æ–º–∞–Ω–¥—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –¥–æ–∑–≤–æ–ª–µ–Ω–∏—Ö).\n"
            "!help - –ü–æ–∫–∞–∑—É—î –∫–æ–º–∞–Ω–¥–∏.\n"
            "```"
        )
        await ctx.send(text)

    @bot.command()
    async def add_server(ctx, ip, username, password, name=None, port: int = 22):
        if not await check_permissions(ctx):
            return
        async with aiosqlite.connect("servers.db") as db:  # –ó–º—ñ–Ω–µ–Ω–æ —à–ª—è—Ö
            await db.execute("INSERT INTO servers (ip, port, username, password, name) VALUES (?, ?, ?, ?, ?)",
                             (ip, port, username, password, name))
            await db.commit()
        await ctx.reply(f"–°–µ—Ä–≤–µ—Ä {ip} ({name or '–±–µ–∑ —ñ–º–µ–Ω—ñ'}) –¥–æ–¥–∞–Ω–æ!", delete_after=5)
        await ctx.message.delete()

    @bot.command()
    async def ignore_container(ctx, container_name):
        if not await check_permissions(ctx):
            return
        try:
            async with aiosqlite.connect("servers.db") as db:  # –ó–º—ñ–Ω–µ–Ω–æ —à–ª—è—Ö
                await db.execute("INSERT INTO ignored_containers (name) VALUES (?)", (container_name,))
                await db.commit()
            await ctx.reply(f"–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä `{container_name}` –¥–æ–¥–∞–Ω–æ –¥–æ —Å–ø–∏—Å–∫—É —ñ–≥–Ω–æ—Ä–æ–≤–∞–Ω–∏—Ö.", delete_after=5)
        except Exception:
            await ctx.reply(f"–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä `{container_name}` —É–∂–µ –≤ —Å–ø–∏—Å–∫—É —ñ–≥–Ω–æ—Ä–æ–≤–∞–Ω–∏—Ö!", delete_after=5)
        await ctx.message.delete()

    @bot.command()
    async def unignore_container(ctx, container_name):
        if not await check_permissions(ctx):
            return
        async with aiosqlite.connect("servers.db") as db:  # –ó–º—ñ–Ω–µ–Ω–æ —à–ª—è—Ö
            await db.execute("DELETE FROM ignored_containers WHERE name = ?", (container_name,))
            await db.commit()
        await ctx.reply(f"–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä `{container_name}` –≤–∏–¥–∞–ª–µ–Ω–æ –∑—ñ —Å–ø–∏—Å–∫—É —ñ–≥–Ω–æ—Ä–æ–≤–∞–Ω–∏—Ö.", delete_after=5)
        await ctx.message.delete()

    @bot.command()
    async def start_monitor(ctx):
        if not await check_permissions(ctx):
            return
        async with aiosqlite.connect("servers.db") as db:  # –ó–º—ñ–Ω–µ–Ω–æ —à–ª—è—Ö
            async with db.execute("SELECT * FROM servers") as cursor:
                servers = await cursor.fetchall()
        
        if not servers:
            await ctx.reply("–î–æ–¥–∞–π —Å–µ—Ä–≤–µ—Ä–∏ –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö —Å–ø–æ—á–∞—Ç–∫—É!", delete_after=5)
            await ctx.message.delete()
            return

        bot.monitor_state["servers"] = list(servers)
        bot.monitor_state["messages"] = {}
        bot.monitor_state["container_cache"] = {}
        for server in servers:
            server_id, ip, _, _, _, name = server
            text = f"**–°–µ—Ä–≤–µ—Ä {name or '–±–µ–∑ —ñ–º–µ–Ω—ñ'} ({ip})**\n*–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö...*"
            message = await ctx.send(text)
            bot.monitor_state["messages"][ip] = message
            bot.monitor_state["container_cache"][ip] = []

        update_status.change_interval(seconds=1800)
        update_status.start(ctx.channel, servers)
        # await ctx.message.delete()  # –ó–∞–ª–∏—à–∞—î–º–æ –∫–æ–º–∞–Ω–¥—É –≤ —á–∞—Ç—ñ

    @bot.command()
    async def force_update(ctx):
        if not await check_permissions(ctx):
            return
        if update_status.is_running():
            if bot.monitor_state["messages"] and bot.monitor_state["servers"]:
                await update_status.coro(ctx.channel, bot.monitor_state["servers"])
                await ctx.reply("–î–∞–Ω—ñ –ø—Ä–∏–º—É—Å–æ–≤–æ –æ–Ω–æ–≤–ª–µ–Ω–æ!", delete_after=5)
            else:
                await ctx.reply("–ü–æ–º–∏–ª–∫–∞: —Å—Ç–∞–Ω –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!", delete_after=5)
        else:
            await ctx.reply("–ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ! –°–ø–æ—á–∞—Ç–∫—É –≤–∏–∫–æ–Ω–∞–π !start_monitor.", delete_after=5)
        # await ctx.message.delete()  # –ó–∞–ª–∏—à–∞—î–º–æ –∫–æ–º–∞–Ω–¥—É –≤ —á–∞—Ç—ñ

    @bot.command()
    async def sh(ctx, ip: str, *, command: str):
        if ctx.author.id not in bot.allowed_users:
            await ctx.reply("–£ —Ç–µ–±–µ –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏!", delete_after=5)
            await ctx.message.delete()
            return

        async with aiosqlite.connect("servers.db") as db:  # –ó–º—ñ–Ω–µ–Ω–æ —à–ª—è—Ö
            async with db.execute("SELECT * FROM servers WHERE ip = ?", (ip,)) as cursor:
                server = await cursor.fetchone()
        
        if not server:
            await ctx.reply(f"–°–µ—Ä–≤–µ—Ä –∑ IP {ip} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑—ñ!", delete_after=5)
            return

        server_id, ip, port, username, password, name = server
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        try:
            await asyncio.to_thread(ssh.connect, ip, port=port or 22, username=username, password=password)
            stdin, stdout, stderr = await asyncio.to_thread(ssh.exec_command, command)
            output = stdout.read().decode().strip()
            error = stderr.read().decode().strip()
            
            response = f"**–í–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏ –Ω–∞ {name or '–±–µ–∑ —ñ–º–µ–Ω—ñ'} ({ip})**\n"
            response += f"*–ö–æ–º–∞–Ω–¥–∞*: `{command}`\n"
            if output:
                response += f"*–í–∏–≤—ñ–¥*:\n```\n{output[:1000]}\n```\n"
            if error:
                response += f"*–ü–æ–º–∏–ª–∫–∞*:\n```\n{error[:1000]}\n```\n"
            if not output and not error:
                response += "*–í–∏–≤–æ–¥—É –Ω–µ–º–∞—î*\n"
            await ctx.reply(response)
        except Exception as e:
            await ctx.reply(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏: {str(e)}", delete_after=10)
        finally:
            ssh.close()

    @tasks.loop()
    async def update_status(channel, servers):
        async with aiosqlite.connect("servers.db") as db:  # –ó–º—ñ–Ω–µ–Ω–æ —à–ª—è—Ö
            async with db.execute("SELECT * FROM servers") as cursor:
                current_servers = await cursor.fetchall()
        
        current_server_ips = {server[1] for server in current_servers}
        monitored_ips = {server[1] for server in bot.monitor_state["servers"]}
        
        for server in current_servers:
            server_id, ip, port, username, password, name = server
            if ip not in monitored_ips:
                logging.info(f"–í–∏—è–≤–ª–µ–Ω–æ –Ω–æ–≤–∏–π —Å–µ—Ä–≤–µ—Ä: {name or '–±–µ–∑ —ñ–º–µ–Ω—ñ'} ({ip})")
                bot.monitor_state["servers"].append(server)
                text = f"**–°–µ—Ä–≤–µ—Ä {name or '–±–µ–∑ —ñ–º–µ–Ω—ñ'} ({ip})**\n*–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö...*"
                message = await channel.send(text)
                bot.monitor_state["messages"][ip] = message
                bot.monitor_state["container_cache"][ip] = []

        for server in bot.monitor_state["servers"]:
            server_id, ip, port, username, password, name = server
            server_info = await get_server_info({"ip": ip, "port": port, "username": username, "password": password})
            logging.debug(f"Server info for {ip}: {server_info}")
            
            if isinstance(server_info, str):
                text = f"**–°–µ—Ä–≤–µ—Ä {name or '–±–µ–∑ —ñ–º–µ–Ω—ñ'} ({ip})**\n*{server_info}*\n*–û—Å—Ç–∞–Ω–Ω—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S UTC')}*"
            else:
                text = f"**–°–µ—Ä–≤–µ—Ä {name or '–±–µ–∑ —ñ–º–µ–Ω—ñ'} ({ip})**\n"
                text += f"*–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤*: {len(server_info['containers'])}\n"
                text += f"*–ù–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è*: CPU {server_info['cpu']}%, RAM {server_info['mem']}, –î–∏—Å–∫ {server_info['disk']}\n"
                text += f"*–ß–∞—Å —Ä–æ–±–æ—Ç–∏*: {server_info['uptime']}\n"
                text += "----------------------------------------\n"
                
                cached_names = {c['name'] for c in bot.monitor_state["container_cache"][ip]}
                current_names = {c['name'] for c in server_info['containers']}
                new_containers = current_names - cached_names
                if new_containers:
                    logging.info(f"–ù–æ–≤—ñ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏ –Ω–∞ {ip}: {new_containers}")
                
                bot.monitor_state["container_cache"][ip] = server_info['containers']
                
                if server_info['containers']:
                    start = 0
                    per_page = 20
                    end = min(per_page, len(server_info['containers']))
                    total_pages = (len(server_info['containers']) + per_page - 1) // per_page
                    if total_pages > 1:
                        text += f"–°—Ç–æ—Ä—ñ–Ω–∫–∞ 1/{total_pages}\n"
                    text += "```css\n–°—Ç–∞—Ç—É—Å –Ü–º‚Äô—è            –ß–∞—Å —Ä–æ–±–æ—Ç–∏           CPU      RAM\n" + "-" * 50 + "\n"
                    for c in server_info['containers'][start:end]:
                        status = "üü¢" if c['status'] == "running" else "üî¥"
                        text += f"{status} {c['name']:<15} {c['uptime'][:20]:<20} {c['cpu_load']:<8} {c['mem_load']:<8}\n"
                    text += "```\n"
                else:
                    text += "*–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏*: –ù–µ–º–∞—î\n"
                text += f"*–û—Å—Ç–∞–Ω–Ω—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S UTC')}*"
            
            message = bot.monitor_state["messages"].get(ip)
            if message:
                view = PaginationView(ip, server_info, server_info['containers']) if server_info['containers'] and total_pages > 1 else None
                await message.edit(content=text, view=view)
