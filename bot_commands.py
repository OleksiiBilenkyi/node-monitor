import discord
from discord.ext import tasks
from datetime import datetime
import paramiko
import aiosqlite
from data_base import get_server_info, get_ignored_containers
import logging
import os

def setup_commands(bot):
    bot.monitor_state = {"messages": {}, "servers": [], "container_cache": {}}

    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
    log_dir = "logs"
    os.makedirs(log_dir, exist_ok=True) 
    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s [%(levelname)s] %(message)s",
        handlers=[
            logging.FileHandler(os.path.join(log_dir, "bot.log"), encoding="utf-8"),
            logging.StreamHandler()  # –õ–æ–≥–∏ –≤ stdout –¥–ª—è Docker
        ]
    )

    async def check_permissions(ctx):
        if not bot.allowed_users or ctx.author.id in bot.allowed_users:
            return True
        await ctx.reply("–£ —Ç–µ–±–µ –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏!", delete_after=5)
        await ctx.message.delete()
        return False

    @bot.command(name="help")
    async def custom_help(ctx):
        text = (
            "**–î–æ–ø–æ–º–æ–≥–∞**\n"
            "```css\n"
            "!add_server <ip> <username> <password> [name] [port] - –î–æ–¥–∞—î —Å–µ—Ä–≤–µ—Ä –¥–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É (–ø–æ—Ä—Ç –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 22).\n"
            "!ignore_container <name> - –Ü–≥–Ω–æ—Ä—É—î –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —É –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É.\n"
            "!unignore_container <name> - –ü—Ä–∏–±–∏—Ä–∞—î –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑—ñ —Å–ø–∏—Å–∫—É —ñ–≥–Ω–æ—Ä–æ–≤–∞–Ω–∏—Ö.\n"
            "!start_monitor - –ó–∞–ø—É—Å–∫–∞—î –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ä–≤–µ—Ä—ñ–≤.\n"
            "!force_update - –ü—Ä–∏–º—É—Å–æ–≤–æ –æ–Ω–æ–≤–ª—é—î –¥–∞–Ω—ñ.\n"
            "!help - –ü–æ–∫–∞–∑—É—î —Ü–µ–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥.\n"
            "```"
        )
        await ctx.send(text)

    @bot.command()
    async def add_server(ctx, ip, username, password, name=None, port: int = 22):
        if not await check_permissions(ctx):
            return
        async with aiosqlite.connect("servers.db") as db:
            await db.execute("INSERT INTO servers (ip, port, username, password, name) VALUES (?, ?, ?, ?, ?)",
                             (ip, port, username, password, name))
            await db.commit()
        await ctx.reply(f"–°–µ—Ä–≤–µ—Ä {ip} ({name or '–±–µ–∑ —ñ–º–µ–Ω—ñ'}) –¥–æ–¥–∞–Ω–æ!", delete_after=5)
        await ctx.message.delete()

    @bot.command()
    async def ignore_container(ctx, container_name):
        if not await check_permissions(ctx):
            return
        try:
            async with aiosqlite.connect("servers.db") as db:
                await db.execute("INSERT INTO ignored_containers (name) VALUES (?)", (container_name,))
                await db.commit()
            await ctx.reply(f"–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä `{container_name}` –¥–æ–¥–∞–Ω–æ –¥–æ —Å–ø–∏—Å–∫—É —ñ–≥–Ω–æ—Ä–æ–≤–∞–Ω–∏—Ö.", delete_after=5)
        except Exception:
            await ctx.reply(f"–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä `{container_name}` —É–∂–µ –≤ —Å–ø–∏—Å–∫—É —ñ–≥–Ω–æ—Ä–æ–≤–∞–Ω–∏—Ö!", delete_after=5)
        await ctx.message.delete()

    @bot.command()
    async def unignore_container(ctx, container_name):
        if not await check_permissions(ctx):
            return
        async with aiosqlite.connect("servers.db") as db:
            await db.execute("DELETE FROM ignored_containers WHERE name = ?", (container_name,))
            await db.commit()
        await ctx.reply(f"–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä `{container_name}` –≤–∏–¥–∞–ª–µ–Ω–æ –∑—ñ —Å–ø–∏—Å–∫—É —ñ–≥–Ω–æ—Ä–æ–≤–∞–Ω–∏—Ö.", delete_after=5)
        await ctx.message.delete()

    @bot.command()
    async def start_monitor(ctx):
        if not await check_permissions(ctx):
            return
        async with aiosqlite.connect("servers.db") as db:
            async with db.execute("SELECT * FROM servers") as cursor:
                servers = await cursor.fetchall()
        
        if not servers:
            await ctx.reply("–î–æ–¥–∞–π —Å–µ—Ä–≤–µ—Ä–∏ –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö —Å–ø–æ—á–∞—Ç–∫—É!", delete_after=5)
            await ctx.message.delete()
            return

        bot.monitor_state["servers"] = list(servers)
        bot.monitor_state["messages"] = {}
        bot.monitor_state["container_cache"] = {}
        for server in servers:
            server_id, ip, _, _, _, name = server
            message = await ctx.reply(f"**–°–µ—Ä–≤–µ—Ä {name or '–±–µ–∑ —ñ–º–µ–Ω—ñ'} ({ip})**: –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö...")
            bot.monitor_state["messages"][ip] = message
            bot.monitor_state["container_cache"][ip] = []

        update_status.change_interval(seconds=1800)  # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–∂–Ω—ñ 30 —Ö–≤–∏–ª–∏–Ω
        update_status.start(ctx.channel, servers)
        await ctx.message.delete()

    @bot.command()
    async def force_update(ctx):
        if not await check_permissions(ctx):
            return
        if update_status.is_running():
            if bot.monitor_state["messages"] and bot.monitor_state["servers"]:
                await update_status.coro(ctx.channel, bot.monitor_state["servers"])
                await ctx.reply("–î–∞–Ω—ñ –ø—Ä–∏–º—É—Å–æ–≤–æ –æ–Ω–æ–≤–ª–µ–Ω–æ!", delete_after=5)
            else:
                await ctx.reply("–ü–æ–º–∏–ª–∫–∞: —Å—Ç–∞–Ω –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!", delete_after=5)
        else:
            await ctx.reply("–ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ! –°–ø–æ—á–∞—Ç–∫—É –≤–∏–∫–æ–Ω–∞–π !start_monitor.", delete_after=5)
        await ctx.message.delete()

    @tasks.loop()
    async def update_status(channel, servers):
        async with aiosqlite.connect("servers.db") as db:
            async with db.execute("SELECT * FROM servers") as cursor:
                current_servers = await cursor.fetchall()
        
        current_server_ips = {server[1] for server in current_servers}
        monitored_ips = {server[1] for server in bot.monitor_state["servers"]}
        
        for server in current_servers:
            server_id, ip, port, username, password, name = server
            if ip not in monitored_ips:
                logging.info(f"–í–∏—è–≤–ª–µ–Ω–æ –Ω–æ–≤–∏–π —Å–µ—Ä–≤–µ—Ä: {name or '–±–µ–∑ —ñ–º–µ–Ω—ñ'} ({ip})")
                bot.monitor_state["servers"].append(server)
                message = await channel.send(f"**–°–µ—Ä–≤–µ—Ä {name or '–±–µ–∑ —ñ–º–µ–Ω—ñ'} ({ip})**: –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö...")
                bot.monitor_state["messages"][ip] = message
                bot.monitor_state["container_cache"][ip] = []

        for server in bot.monitor_state["servers"]:
            server_id, ip, port, username, password, name = server
            server_info = await get_server_info({"ip": ip, "port": port, "username": username, "password": password})
            logging.debug(f"Server info for {ip}: {server_info}")
            
            if isinstance(server_info, str):
                text = f"**–°–µ—Ä–≤–µ—Ä {name or '–±–µ–∑ —ñ–º–µ–Ω—ñ'} ({ip})**: *{server_info}*\n*–û—Å—Ç–∞–Ω–Ω—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S UTC')}*"
            else:
                text = f"**–°–µ—Ä–≤–µ—Ä {name or '–±–µ–∑ —ñ–º–µ–Ω—ñ'} ({ip})**\n"
                text += f"*–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤*: {len(server_info['containers'])}\n"
                text += f"*–ù–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è*: CPU {server_info['cpu']}%, RAM {server_info['mem']}, –î–∏—Å–∫ {server_info['disk']}\n"
                text += f"*–ß–∞—Å —Ä–æ–±–æ—Ç–∏*: {server_info['uptime']}\n"
                text += "----------------------------------------\n"
                
                if server_info['containers']:
                    cached_names = {c['name'] for c in bot.monitor_state["container_cache"][ip]}
                    current_names = {c['name'] for c in server_info['containers']}
                    new_containers = current_names - cached_names
                    if new_containers:
                        logging.info(f"–ù–æ–≤—ñ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏ –Ω–∞ {ip}: {new_containers}")
                    
                    bot.monitor_state["container_cache"][ip] = server_info['containers']
                    
                    text += "```css\n–°—Ç–∞—Ç—É—Å –Ü–º‚Äô—è            –ß–∞—Å —Ä–æ–±–æ—Ç–∏           CPU      RAM\n" + "-" * 50 + "\n"
                    for c in server_info['containers']:
                        status = "üü¢" if c['status'] == "running" else "üî¥"
                        text += f"{status} {c['name']:<15} {c['uptime']:<20} {c['cpu_load']:<8} {c['mem_load']:<8}\n"
                    text += "```\n"
                else:
                    text += "*–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏*: –ù–µ–º–∞—î\n"
                text += f"*–û—Å—Ç–∞–Ω–Ω—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S UTC')}*"
            
            logging.debug(f"Updating text for {ip}: {text}")
            message = bot.monitor_state["messages"].get(ip)
            if message:
                await message.edit(content=text.split('\n')[0] + '\n' + '\n'.join(text.split('\n')[1:]))
